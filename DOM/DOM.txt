DOM
Document Object Model


document object- represents the visuals overall active elements info on the screen
			  by using various objects


DOM - we have a document object which is modelled upon how you develop an HTML file.

    - its not actually the visual elements you are looking at, its a representation
	 of the document, which you can modify in JS, and changes will be applied 
	 in the real/actual HTML.


Accessing the DOC cab be done in two ways
1) via the standard way.

2) via the CSS Selectors.

When using CSS Selectors, it's easy to understand and implement


TARGETING DOM Elements

Target the right element of the DOC Object Model.

A) THE STANDARD WAY 

1) Targetting Tag Elements

	document.getElementsByTagname() allows us to target all the tags of
the mentioned type passed in the arguments


Eg: document.getElementsByTagname('p') - don't use < >
	
    returns all the paragraph elements in the HTML in an array.
    array - for multiple elements of the same type.
    
NOTE: Whenever .getElements_____ used it will return an array. Even if there
	 is a single element is present of that type in HTML.
 
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <p>Hello World</p>
    <h1>JavaScript Essentials</h1>
    <script src="myapp.js"></script>
  </body>
</html>


->[p] - contains a single paragraph element


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <p>Hello World </p>
    <p>My Name is </p>
    <p>Shashank Kumar </p>
    <h1>JavaScript Essentials</h1>
    <script src="myapp.js"></script>
  </body>
</html>

->[p p p] - array returned

	You can further, modify these elements.
 

2) Target the Specific Tag Elements (By id)

first assign an id to that specific tag element in the HTML

then use document.getElementById() - pass the id mentioned above in as
argument in ''

.getElementBy - see Element - singular

Eg:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <p>Hello World </p>
    <p>My Name is </p>
    <p id="name">Shashank Kumar </p>
    <h1>JavaScript Essentials</h1>
    <script src="myapp.js"></script>
  </body>
</html>

document.getElementById('name');
-><p id="name">Shashank Kumar </p> - single element returned

We target the specific p element where Shashank Kumar was written


3) Targeting the Tag Elements by Class(By Class Names)

you can target different elements with the same class name.
use document.getElementsByClassName() and pass the class name as an argument with
''

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <p>Hello World </p>
    <p class="pClass">My Name is </p>
    <p id="name">Shashank Kumar </p>
    <h1 class="pClass">JavaScript Essentials</h1>
    <script src="myapp.js"></script>
  </body>
</html>

document.getElementsByClassName('pClass');

->[p.pClass, h1.pClass] - since .getElements______ used array is returned

all the elements under the pClass are returned
Here p and h1 tag


B) USING CSS SELECTORS

using document.querySelectorAll();

Eg: document.querySelectorAll('#Hello'); 
    ->[p#Hello]
    - targets the paragraph tag containing Hello


Eg: document.querySelectorAll('.pClass'); 
	->[p.pClass, h1.pClass]
	- target the elements under the class name pClass

NOTE: Here multiple elements can be selected at the same time

Eg: document.querySelectorAll('#Hello, .pClass')
    ->[p#Hello, p.pClass, h1.pClass]

    -targets the paragraph tag containing Hello and the elements under the class name
     pClass together.



When the elements are selected, you can modify the elements as per your
convenience.


